class TimeMap {
    HashMap<String, List<String[]>> map;
    public TimeMap() {
        map = new HashMap<String, List<String[]>>();
    }
    
    public void set(String key, String value, int timestamp) {
        if(!map.containsKey(key))
            map.put(key, new ArrayList());
        String [] entry = new String[2];
        entry[0] = String.valueOf(timestamp);
        entry[1] = value;
        map.get(key).add(entry);
    }
    
    public String get(String key, int timestamp) {
        if(!map.containsKey(key))
            return "";
        //return "" if timestamp is less than the least available entry
        if(timestamp < Integer.parseInt(map.get(key).get(0)[0]))
           return "";
        //Do binary search to find the greatest entry less than equal to the timestamp
        int index = findElement(map.get(key),timestamp);
        return map.get(key).get(index)[1];
        
    }
    
    //Binary search algorithm
    public int findElement(List<String[]> list, int timestamp){
        int start =0;
        int end = list.size()-1;
        
        while(start<end){
            int mid = (start+end+1)/2;
            if(Integer.parseInt(list.get(mid)[0])>timestamp)
                end=mid-1;
            else if(Integer.parseInt(list.get(mid)[0])==timestamp)
                return mid;
            else
                start=mid;
        }
        return start;
    }
}
